import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import subprocess
import threading
from pathlib import Path
from datetime import datetime
import time
import atexit

class AudioProcessorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Audio Processor - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ê—É–¥–∏–æ/–í–∏–¥–µ–æ")
        self.root.geometry("800x750")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ—Ç scripts)
        self.base_dir = Path(__file__).parent.parent
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ø–∞–ø–∫–∏
        self.input_dir = self.base_dir / "input"
        self.audio_dir = self.base_dir / "audio" 
        self.transcripts_dir = self.base_dir / "transcripts"
        self.output_dir = self.base_dir / "output"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for dir_path in [self.input_dir, self.audio_dir, self.transcripts_dir, self.output_dir]:
            dir_path.mkdir(exist_ok=True)
        
        self.current_work_dir = self.input_dir  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ–º —Å input
        
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.active_processes = []
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.register_cleanup_handlers()
        
        self.setup_ui()
        self.refresh_files()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.check_system_requirements, daemon=True).start()
        
    def register_cleanup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        try:
            # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            
            # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            atexit.register(self.cleanup_on_exit)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.cleanup_on_exit()
        except:
            pass
        self.root.destroy()
        
    def cleanup_on_exit(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            if hasattr(self, 'active_processes') and self.active_processes:
                for process in self.active_processes[:]:
                    try:
                        if process.poll() is None:
                            process.terminate()
                            process.wait(timeout=2)
                    except:
                        pass
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –í—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏
        dir_frame = ttk.LabelFrame(main_frame, text="–†–∞–±–æ—á–∏–µ –ø–∞–ø–∫–∏", padding="10")
        dir_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        self.work_dir_var = tk.StringVar(value="input")
        
        ttk.Radiobutton(dir_frame, text="üìπ –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã (input)", 
                       variable=self.work_dir_var, value="input",
                       command=self.change_work_dir).grid(row=0, column=0, sticky=tk.W, padx=(0, 20))
        ttk.Radiobutton(dir_frame, text="üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã (audio)", 
                       variable=self.work_dir_var, value="audio",
                       command=self.change_work_dir).grid(row=0, column=1, sticky=tk.W, padx=(0, 20))
        ttk.Radiobutton(dir_frame, text="üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (transcripts)", 
                       variable=self.work_dir_var, value="transcripts",
                       command=self.change_work_dir).grid(row=0, column=2, sticky=tk.W)
        ttk.Radiobutton(dir_frame, text="üé® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (output)", 
                       variable=self.work_dir_var, value="output",
                       command=self.change_work_dir).grid(row=0, column=3, sticky=tk.W)
        
        ttk.Button(dir_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", command=self.open_current_directory).grid(row=0, column=4, sticky=tk.E, padx=(20, 0))
        
        dir_frame.columnconfigure(4, weight=1)
        
        # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
        self.current_dir_var = tk.StringVar(value=str(self.current_work_dir))
        ttk.Label(main_frame, text="–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:").grid(row=1, column=0, sticky=tk.W, pady=(0, 5))
        ttk.Entry(main_frame, textvariable=self.current_dir_var, state="readonly", width=80).grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        ttk.Label(main_frame, text="–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:").grid(row=3, column=0, sticky=tk.W, pady=(0, 5))
        
        files_frame = ttk.Frame(main_frame)
        files_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        self.files_tree = ttk.Treeview(files_frame, columns=('type', 'size'), show='tree headings', height=10)
        self.files_tree.heading('#0', text='–§–∞–π–ª')
        self.files_tree.heading('type', text='–¢–∏–ø')
        self.files_tree.heading('size', text='–†–∞–∑–º–µ—Ä')
        
        self.files_tree.column('#0', width=400)
        self.files_tree.column('type', width=100)
        self.files_tree.column('size', width=100)
        
        scrollbar = ttk.Scrollbar(files_frame, orient=tk.VERTICAL, command=self.files_tree.yview)
        self.files_tree.configure(yscrollcommand=scrollbar.set)
        
        self.files_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        files_frame.columnconfigure(0, weight=1)
        files_frame.rowconfigure(0, weight=1)
        
        ttk.Button(main_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.refresh_files).grid(row=5, column=0, sticky=tk.W, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ttk.LabelFrame(main_frame, text="–î–µ–π—Å—Ç–≤–∏—è", padding="10")
        actions_frame.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        ttk.Button(actions_frame, text="–ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ", 
                  command=self.extract_audio, width=20).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(actions_frame, text="–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", 
                  command=self.transcribe_audio, width=20).grid(row=0, column=1, padx=(5, 5))
        ttk.Button(actions_frame, text="–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª", 
                  command=self.full_cycle, width=15).grid(row=0, column=2, padx=(5, 5))
        ttk.Button(actions_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                  command=self.stop_all_processes, width=12).grid(row=0, column=3, padx=(5, 0))
        
        actions_frame.columnconfigure(4, weight=1)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_frame = ttk.Frame(main_frame)
        self.progress_frame.grid(row=7, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 5))
        
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_label = ttk.Label(self.progress_frame, textvariable=self.progress_var)
        self.progress_label.grid(row=0, column=0, sticky=tk.W)
        
        self.progress_bar = ttk.Progressbar(self.progress_frame, mode='indeterminate')
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(2, 0))
        
        self.progress_frame.columnconfigure(0, weight=1)
        
        # –õ–æ–≥
        log_label_frame = ttk.Frame(main_frame)
        log_label_frame.grid(row=8, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 5))
        
        ttk.Label(log_label_frame, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:").grid(row=0, column=0, sticky=tk.W)
        
        log_buttons_frame = ttk.Frame(log_label_frame)
        log_buttons_frame.grid(row=0, column=1, sticky=tk.E)
        
        ttk.Button(log_buttons_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë", command=self.copy_all_log, width=12).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(log_buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_log, width=10).grid(row=0, column=1)
        
        log_label_frame.columnconfigure(0, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(main_frame, height=15, width=80, wrap=tk.WORD)
        self.log_text.grid(row=9, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞
        self.log_context_menu = tk.Menu(self.root, tearoff=0)
        self.log_context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selected_log)
        self.log_context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë", command=self.copy_all_log)
        self.log_context_menu.add_separator()
        self.log_context_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_log)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        self.log_text.bind("<Button-3>", self.show_log_context_menu)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(4, weight=1)
        main_frame.rowconfigure(9, weight=1)
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
    def check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            time.sleep(0.5)
            
            self.log("==========================================")
            self.log("      –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
            self.log("==========================================")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
            try:
                import torch
                if torch.cuda.is_available():
                    gpu_name = torch.cuda.get_device_name(0)
                    gpu_memory = torch.cuda.get_device_properties(0).total_memory // 1024**3
                    self.log(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞")
                    self.log(f"üéÆ GPU: {gpu_name}")
                    self.log(f"üíæ –í–∏–¥–µ–æ–ø–∞–º—è—Ç—å: {gpu_memory} –ì–ë")
                    self.log("‚ö° –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–æ–π")
                else:
                    self.log("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    self.log("üêå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞ CPU (–º–µ–¥–ª–µ–Ω–Ω–æ)")
            except ImportError:
                self.log("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.log(f"‚ùì –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CUDA: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
            try:
                result = subprocess.run(['ffmpeg', '-version'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    self.log("‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
                    self.log("üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                else:
                    self.log("‚ùå FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            except FileNotFoundError:
                self.log("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            except Exception as e:
                self.log(f"‚ùì –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FFmpeg: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Whisper
            try:
                import whisper
                self.log("‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                available_models = whisper.available_models()
                if 'large-v3' in available_models:
                    self.log("üéØ –ú–æ–¥–µ–ª—å large-v3 –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    self.log("‚ö†Ô∏è –ú–æ–¥–µ–ª—å large-v3 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except ImportError:
                self.log("‚ùå Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.log(f"‚ùì –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Whisper: {e}")
            
            self.log("==========================================")
            self.log("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            self.log("")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        
    def change_work_dir(self):
        dir_name = self.work_dir_var.get()
        if dir_name == "input":
            self.current_work_dir = self.input_dir
        elif dir_name == "audio":
            self.current_work_dir = self.audio_dir
        elif dir_name == "transcripts":
            self.current_work_dir = self.transcripts_dir
        elif dir_name == "output":
            self.current_work_dir = self.output_dir
            
        self.current_dir_var.set(str(self.current_work_dir))
        self.refresh_files()
        
    def open_current_directory(self):
        os.startfile(self.current_work_dir)
        
    def stop_all_processes(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if not self.active_processes:
            self.log("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
            
        self.log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        
        stopped_count = 0
        for process in self.active_processes[:]:
            try:
                if process.poll() is None:
                    process.terminate()
                    try:
                        process.wait(timeout=3)
                    except subprocess.TimeoutExpired:
                        process.kill()
                    stopped_count += 1
                self.active_processes.remove(process)
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        self.stop_progress("–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        if stopped_count > 0:
            self.log(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {stopped_count}")
        else:
            self.log("‚ÑπÔ∏è –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
    def cleanup_finished_processes(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        self.active_processes = [p for p in self.active_processes if p.poll() is None]
        
    def start_progress(self, message):
        self.progress_var.set(message)
        self.progress_bar.start(10)
        
    def stop_progress(self, message="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"):
        self.progress_bar.stop()
        self.progress_var.set(message)
        
    def log(self, message):
        try:
            self.log_text.insert(tk.END, f"{message}\n")
            self.log_text.see(tk.END)
            self.root.update()
        except:
            print(message)  # Fallback –Ω–∞ print –µ—Å–ª–∏ GUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
    def show_log_context_menu(self, event):
        try:
            self.log_context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.log_context_menu.grab_release()
            
    def copy_selected_log(self):
        try:
            selected_text = self.log_text.selection_get()
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
            self.log("üìã –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            self.copy_all_log()
            
    def copy_all_log(self):
        log_content = self.log_text.get(1.0, tk.END).strip()
        if log_content:
            self.root.clipboard_clear()
            self.root.clipboard_append(log_content)
            self.log("üìã –í–µ—Å—å –ª–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–õ–æ–≥ –ø—É—Å—Ç")
            
    def clear_log(self):
        self.log_text.delete(1.0, tk.END)
        
    def refresh_files(self):
        self.files_tree.delete(*self.files_tree.get_children())
        
        if not self.current_work_dir.exists():
            return
            
        video_exts = {'.mp4', '.avi', '.mkv', '.mov'}
        audio_exts = {'.m4a', '.wav', '.mp3', '.ogg'}
        text_exts = {'.txt'}
        
        files_with_time = []
        for file_path in self.current_work_dir.iterdir():
            if file_path.is_file():
                ext = file_path.suffix.lower()
                if ext in video_exts or ext in audio_exts or ext in text_exts:
                    mtime = file_path.stat().st_mtime
                    files_with_time.append((file_path, mtime))
        
        files_with_time.sort(key=lambda x: x[1], reverse=True)
        
        for file_path, _ in files_with_time:
            ext = file_path.suffix.lower()
            size = file_path.stat().st_size
            size_str = f"{size // 1024 // 1024} –ú–ë" if size > 1024*1024 else f"{size // 1024} –ö–ë"
            
            if ext in video_exts:
                file_type = "üìπ –í–∏–¥–µ–æ"
            elif ext in audio_exts:
                file_type = "üéµ –ê—É–¥–∏–æ"
            elif ext in text_exts:
                file_type = "üìÑ –¢–µ–∫—Å—Ç"
                
            self.files_tree.insert('', tk.END, text=file_path.name, 
                                 values=(file_type, size_str))
                                     
    def get_selected_file(self):
        selection = self.files_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞")
            return None
        return self.files_tree.item(selection[0])['text']
        
    def run_command(self, cmd, cwd=None):
        if cwd is None:
            cwd = self.base_dir
            
        try:
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            
            process = subprocess.Popen(cmd, cwd=cwd, shell=True, 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.STDOUT,
                                     universal_newlines=True,
                                     encoding='utf-8',
                                     errors='replace',
                                     env=env)
            
            self.active_processes.append(process)
            self.cleanup_finished_processes()
            
            current_progress_line = None
            
            for line in process.stdout:
                line = line.strip()
                if not line:
                    continue
                    
                if process.poll() is not None:
                    break
                    
                if '%|' in line and ('frames/s' in line or 'it/s' in line):
                    if current_progress_line is not None:
                        self.log_text.delete(f"{current_progress_line}.0", f"{current_progress_line + 1}.0")
                    
                    self.log_text.insert(tk.END, f"{line}\n")
                    current_progress_line = int(self.log_text.index(tk.END).split('.')[0]) - 2
                    self.log_text.see(tk.END)
                    self.root.update()
                else:
                    current_progress_line = None
                    self.log(line)
                
            process.wait()
            
            if process in self.active_processes:
                self.active_processes.remove(process)
                
            return process.returncode == 0
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {e}")
            return False
            
    def extract_audio(self):
        selected_file = self.get_selected_file()
        if not selected_file:
            return
            
        input_file = self.input_dir / selected_file
        if not input_file.exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ input: {selected_file}")
            return
            
        if input_file.suffix.lower() not in {'.mp4', '.avi', '.mkv', '.mov'}:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª")
            return
            
        output_file = self.audio_dir / f"{input_file.stem}_audio.m4a"
        
        self.log(f"–ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑: {selected_file}")
        self.log(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: audio/{output_file.name}")
        self.start_progress("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        
        def extract():
            cmd = f'ffmpeg -y -i "{input_file}" -vn -acodec copy "{output_file}" -hide_banner'
            if self.run_command(cmd):
                self.log(f"‚úì –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {output_file.name}")
                self.refresh_files()
                self.stop_progress("–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
            else:
                self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ")
                self.stop_progress("–û—à–∏–±–∫–∞")
                
        threading.Thread(target=extract, daemon=True).start()
        
    def transcribe_audio(self):
        selected_file = self.get_selected_file()
        if not selected_file:
            return
            
        audio_file = self.audio_dir / selected_file
        if not audio_file.exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ audio: {selected_file}")
            return
            
        if audio_file.suffix.lower() not in {'.m4a', '.wav', '.mp3', '.ogg'}:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            return
            
        self.log(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º: {selected_file}")
        self.start_progress("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...")
        
        def transcribe():
            scripts_dir = self.base_dir / "scripts"
            cmd = f'python run_whisper.py "{audio_file}"'
            if self.run_command(cmd, cwd=scripts_dir):
                txt_file = audio_file.with_suffix('.txt')
                transcript_file = self.transcripts_dir / txt_file.name
                if txt_file.exists():
                    txt_file.rename(transcript_file)
                    self.log(f"‚úì –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞: transcripts/{transcript_file.name}")
                else:
                    self.log(f"‚úì –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {audio_file.stem}.txt")
                self.refresh_files()
                self.stop_progress("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                self.stop_progress("–û—à–∏–±–∫–∞")
                
        threading.Thread(target=transcribe, daemon=True).start()
        
    def full_cycle(self):
        selected_file = self.get_selected_file()
        if not selected_file:
            return
            
        input_file = self.input_dir / selected_file
        if not input_file.exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ input: {selected_file}")
            return
            
        if input_file.suffix.lower() not in {'.mp4', '.avi', '.mkv', '.mov'}:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
            return
            
        audio_file = self.audio_dir / f"{input_file.stem}_audio.m4a"
        
        self.log(f"=== –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¥–ª—è: {selected_file} ===")
        self.start_progress("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        def full_process():
            self.log("–®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
            self.progress_var.set("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
            cmd1 = f'ffmpeg -y -i "{input_file}" -vn -acodec copy "{audio_file}" -hide_banner'
            if not self.run_command(cmd1):
                self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ")
                self.stop_progress("–û—à–∏–±–∫–∞")
                return
                
            self.log("‚úì –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
            
            self.log("–®–∞–≥ 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è...")
            self.progress_var.set("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...")
            scripts_dir = self.base_dir / "scripts"
            cmd2 = f'python run_whisper.py "{audio_file}"'
            if not self.run_command(cmd2, cwd=scripts_dir):
                self.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                self.stop_progress("–û—à–∏–±–∫–∞")
                return
            
            txt_file = audio_file.with_suffix('.txt')
            transcript_file = self.transcripts_dir / txt_file.name
            if txt_file.exists():
                txt_file.rename(transcript_file)
                
            self.log("‚úì –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
            self.log("=== –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù ===")
            self.refresh_files()
            self.stop_progress("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        threading.Thread(target=full_process, daemon=True).start()

if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = AudioProcessorGUI(root)
        root.mainloop()
    except Exception as e:
        import traceback
        with open("error_log.txt", "w", encoding="utf-8") as f:
            f.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GUI:\n{e}\n\n")
            f.write(traceback.format_exc())
        try:
            import tkinter.messagebox as mb
            mb.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:\n{e}")
        except:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(traceback.format_exc())